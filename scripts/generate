#!/usr/bin/env bash
# This script was generated by bashly 1.0.7 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
generate_usage() {
  if [[ -n $long_usage ]]; then
    printf "generate - Generate new RN project\n"
    echo

  else
    printf "generate - Generate new RN project\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  generate COMMAND\n"
  printf "  generate [COMMAND] --help | -h\n"
  printf "  generate --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Generate new Expo project\n" "expo"
  printf "  %s   Generate new bare project\n" "bare"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
generate_expo_usage() {
  if [[ -n $long_usage ]]; then
    printf "generate expo - Generate new Expo project\n"
    echo

  else
    printf "generate expo - Generate new Expo project\n"
    echo

  fi

  printf "Alias: e\n"
  echo

  printf "%s\n" "Usage:"
  printf "  generate expo [SDK] [OPTIONS]\n"
  printf "  generate expo --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--fabric, -f"
    printf "    Should enable new architecture\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "SDK"
    printf "    Specify version of the Expo SDK\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  generate expo 49 --fabric\n"
    printf "  generate expo --f\n"
    printf "  generate expo\n"
    echo

  fi
}

# :command.usage
generate_bare_usage() {
  if [[ -n $long_usage ]]; then
    printf "generate bare - Generate new bare project\n"
    echo

  else
    printf "generate bare - Generate new bare project\n"
    echo

  fi

  printf "Alias: b\n"
  echo

  printf "%s\n" "Usage:"
  printf "  generate bare [VERSION] [OPTIONS]\n"
  printf "  generate bare --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--fabric, -f"
    printf "    Should enable new architecture\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "VERSION"
    printf "    Specify version of the React Native\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  generate bare 0.72 --fabric\n"
    printf "  generate bare --f\n"
    printf "  generate bare\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.user_lib
# src/lib/validate_rn_version_required.sh
validate_rn_version_required() {
  if ! [[ "$1" =~ ^0(\.[0-9]+)*$ ]] ; then
    echo "SDK should be a number like 0.72 or 0.72.0"
  elif ! (( $(echo "${1#*.} >= 72" | bc -l) )); then
    echo "Min. supported RN version is 0.72"
  fi
}

# src/lib/validate_sdk_version_required.sh
validate_sdk_version_required() {
  if ! [[ "$1" =~ ^[0-9]+$ ]] ; then
    echo "SDK should be a number"
  elif [[ "$1" < 49 ]]; then
    echo "Min. supported SDK version is 49"
  fi
}

# :command.command_functions
# :command.function
generate_expo_command() {
  # src/expo_command.sh
  sdk=${args[sdk]}
  fabric=${args[--fabric]}

  echo "🗑️ Cleanup examples/expo"
  cd examples
  rm -rf expo_*

  echo "⚛️ Install new Expo project"

  if [ -n "$sdk" ]; then
    echo "Using SDK $sdk"
    folder_name="expo_$sdk"
    npx create-expo-app $folder_name -t "expo-template-blank-typescript@sdk-$sdk"
  else
    echo "Using most recent SDK"
    folder_name="expo_latest"
    npx create-expo-app $folder_name -t expo-template-blank-typescript
  fi

  cd $folder_name

  app_folder="../shared/app"
  expo_folder="../shared/expo"

  echo "✂️  Copying shared folder"

  cp -rp "$app_folder"/* .
  find "$expo_folder" -type f -exec cp -p {} . \;

  npx expo install expo-build-properties

  if [[ "$fabric" == 1 ]]; then
    echo "🚀 Enabling new architecture"
  fi

  node ../../scripts/src/expo-arch-switcher.js dir=$folder_name fabric=$fabric
  node ../../scripts/src/expo-remove-main.js

  echo "⭐ Done ⭐"

}

# :command.function
generate_bare_command() {
  # src/bare_command.sh
  version=${args[version]}
  fabric=${args[--fabric]}

  echo "🗑️  Cleanup examples/bare"
  cd examples
  rm -rf bare_*

  echo "⚛️  Install new React Native project"

  if [ -n "$version" ]; then
    echo "Using version $version"
    folder_name="bare_$(echo "$version" | cut -d '.' -f 2)"
    npx react-native init $folder_name --version $version
  else
    echo "Using most recent version"
    folder_name="bare_latest"
    npx react-native init $folder_name
  fi

  cd $folder_name

  app_folder="../shared/app"
  bare_folder="../shared/bare"

  echo "✂️  Copying shared folder"

  cp -rp "$app_folder"/* .
  find "$bare_folder" -type f -exec cp -p {} . \;

  RCT_NEW_ARCH_ENABLED=$fabric npx pod-install

  if [[ "$fabric" == 1 ]]; then
    echo "🚀 Enabling new architecture"
  fi

  node ../../scripts/src/bare-arch-switcher.js dir=$folder_name fabric=$fabric
  cd android && ./gradlew generateCodegenArtifactsFromSchema && cd ..

  echo "⭐ Done ⭐"

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        generate_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    expo | e)
      action="expo"
      shift
      generate_expo_parse_requirements "$@"
      shift $#
      ;;

    bare | b)
      action="bare"
      shift
      generate_bare_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      generate_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
generate_expo_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        generate_expo_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="expo"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --fabric | -f)

        # :flag.case_no_arg
        args['--fabric']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['sdk']+x} ]]; then
          # :argument.validations
          if [[ -n $(validate_sdk_version_required "$1") ]]; then
            printf "validation error in %s:\n%s\n" "SDK" "$(validate_sdk_version_required "$1")" >&2
            exit 1
          fi

          args['sdk']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
generate_bare_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        generate_bare_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="bare"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --fabric | -f)

        # :flag.case_no_arg
        args['--fabric']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['version']+x} ]]; then
          # :argument.validations
          if [[ -n $(validate_rn_version_required "$1") ]]; then
            printf "validation error in %s:\n%s\n" "VERSION" "$(validate_rn_version_required "$1")" >&2
            exit 1
          fi

          args['version']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "expo") generate_expo_command ;;
    "bare") generate_bare_command ;;
  esac
}

initialize
run "$@"
